[{"/home/alexander/project/umc/front/src/index.js":"1","/home/alexander/project/umc/front/src/App.js":"2","/home/alexander/project/umc/front/src/reportWebVitals.js":"3","/home/alexander/pizzaSoft/umc/front/src/index.js":"4","/home/alexander/pizzaSoft/umc/front/src/reportWebVitals.js":"5","/home/alexander/pizzaSoft/umc/front/src/App.js":"6"},{"size":507,"mtime":1607682292000,"results":"7","hashOfConfig":"8"},{"size":13008,"mtime":1610052120572,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1607420326000,"results":"10","hashOfConfig":"8"},{"size":507,"mtime":1610140744655,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1610140744655,"results":"13","hashOfConfig":"12"},{"size":12190,"mtime":1610229559377,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"12o5e1z",{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"3xtc4h",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/alexander/project/umc/front/src/index.js",[],["30","31"],"/home/alexander/project/umc/front/src/App.js",["32","33","34","35","36","37"],"import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Input,\n  Button,\n  Select,\n  Radio,\n  DatePicker,\n  Checkbox,\n  notification,\n  Spin,\n} from 'antd';\nimport InputMask from 'react-input-mask';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport locale from 'antd/es/date-picker/locale/ru_RU';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport './App.css';\n\nconst { Option } = Select;\nconst dateFormat = 'DD.MM.YYYY';\nconst dateToday = moment(new Date()).format('DD-MM-YYYY');\nconst hideCategory = 'не имею';\n\nconst layout = {\n  labelCol: {\n    lg: 8,\n    sm: 10,\n  },\n  wrapperCol: {\n    lg: 12,\n    sm: 14,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    lg: { offset: 8, span: 16 },\n    sm: { offset: 10, span: 14 },\n  },\n};\nconst validateMessages = {\n  required: '${label} обязательное поле для заполнения!',\n  types: {\n    email: 'Введите корректный ${label}',\n    // TODO: не рпботает валидация на строку\n    // TODO: валидация дат, можно отправить 2018 год!\n    string: 'В поле ${label} можно вводить только русские буквы!',\n    number: 'Введите корректный ${label}!',\n  },\n  string: {\n    range: '${label} должно быть от ${min} до ${max} символов!',\n  },\n};\n\nfunction App() {\n  const [institutions, setInstitutions] = useState([]);\n  const [position, setPosition] = useState([]);\n  const [radioValue, setRadioVaule] = useState(hideCategory);\n  const [isError, setIsError] = useState(null);\n  const [form] = Form.useForm();\n  const [pdf, setPdf] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch('/institutions');\n        const data = await response.json();\n        if (response.status === 200) {\n          setInstitutions(data[0]);\n          setPosition(data[1]);\n          setIsLoading(false);\n        } else {\n          setIsLoading(false);\n          setIsError(data.message);\n          console.log('data : ', data);\n        }\n      } catch (error) {\n        console.log('error: ', error);\n        setIsLoading(false);\n        setIsError({ message: 'Ошибка загрузки образовательных учреждений!' });\n        openNotificationWithIcon('error', {\n          message: 'Ошибка',\n          description:\n            'Неудалось загрузить образовательные учреждения! Обновите страницу или попробуйте зайти позже.',\n        });\n      }\n    })();\n  }, []);\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  // const onChangeCAPTCHA = async (token) => {\n  //   const response = await fetch('/captcha', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //       token,\n  //     }),\n  //   });\n  //   const data = await response.json();\n  //   setReCaptcha(data);\n  //   console.log('data >>>', data);\n  // };\n\n  const onFinish = async (values) => {\n    // if (!isReCaptcha) {\n    //   // TODO: уведомление и надпись под капчей\n    //   return;\n    // }\n    const agreement = values.agreement === true ? 'да' : 'нет';\n    if (values.radioHaveCategory === hideCategory) {\n      values.datePicker = '';\n    } else {\n      values.datePicker = moment(values.datePicker).format('DD.MM.YYYY');\n    }\n    values.dateToday = moment(values.dateToday).format('LL');\n    values.dateYear = moment(values.dateYear).format('YYYY');\n    const data = {\n      ...values,\n      agreement,\n    };\n    console.log('Success:', data);\n    try {\n      setIsLoading(true);\n      const response = await fetch('/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data),\n      });\n      // onReset();\n      console.log('===', response);\n      const result = await response.text();\n      openNotificationWithIcon('error', result);\n      console.log('-=-=-=-=-', result);\n\n      setRadioVaule(hideCategory);\n      setPdf(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log('Ошибка, данные не отправлены!', error);\n    }\n  };\n\n  const openNotificationWithIcon = (\n    type,\n    { message, description },\n    duration = 0\n  ) => {\n    notification[type]({\n      message,\n      description,\n      duration,\n    });\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const isCategory = radioValue !== hideCategory;\n\n  const onChangeRadio = ({ target }) => {\n    setRadioVaule(target.value);\n    form.setFieldsValue({\n      radioWantCategory: undefined,\n    });\n  };\n\n  function disabledDate(current) {\n    return (\n      (current && current.year() < moment().year()) ||\n      (current && current.year() > moment().add(3, 'months').year())\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className='spin'>\n        <Spin size='large' tip='Загрузка ...' />\n      </div>\n    );\n  }\n\n  // if (pdf) {\n  //   return (\n  //     <div className='spin'>\n  //       <div>Нажмите кнопку, чтобы сохранить или распечатать файл.</div>\n  //       <Button\n  //         type='primary'\n  //         shape='round'\n  //         icon={<DownloadOutlined />}\n  //         href={'http://localhost:5000' + pdf}\n  //       >\n  //         Открыть\n  //       </Button>\n  //     </div>\n  //   );\n  // }\n  const keyReCaptcha = process.env.REACT_APP_COPY_SITE_KEY;\n\n  return (\n    <>\n      {isError && <p>{isError.message}</p>}\n      <Form\n        {...layout}\n        name='nest-messages'\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        validateMessages={validateMessages}\n        form={form}\n        initialValues={{\n          radioHaveCategory: 'не имею',\n          agreement: true,\n          radioPresence: 'без моего присутствия',\n          radioWantCategory: 'первую',\n          dateToday: moment(dateToday, dateFormat),\n          dateYear: moment().add(3, 'months'),\n        }}\n        scrollToFirstError\n      >\n        <Form.Item\n          name='name'\n          label='Ф.И.О. в род. падеже'\n          validateFirst\n          rules={[\n            {\n              type: 'string',\n              max: 50,\n              min: 8,\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name='phone'\n          label='Телефон'\n          validateFirst\n          rules={[\n            {\n              required: true,\n            },\n            {\n              validator: async (rule, value) => {\n                if (value.replace(/_/g, '').length !== 15) {\n                  throw new Error('Введите номер полностью!');\n                }\n              },\n            },\n          ]}\n        >\n          <InputMask mask='8(999)999-99-99'>\n            {(inputProps) => (\n              <Input {...inputProps} type='tel' disableUnderline={true} />\n            )}\n          </InputMask>\n        </Form.Item>\n        <Form.Item\n          name='email'\n          label='Email'\n          rules={[{ type: 'email', required: true }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name='institutions'\n          label='Название учреждения'\n          rules={[{ required: true }]}\n        >\n          <Select\n            placeholder='Выберите из списка или введите номер школы'\n            showSearch\n            allowClear\n          >\n            {institutions.map((inst) => (\n              <Option value={inst} key={inst}>\n                {inst}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          name='position'\n          label='Должность'\n          rules={[{ required: true }]}\n        >\n          <Select\n            placeholder='Выберите из списка или начните вводить'\n            showSearch\n            allowClear\n          >\n            {position.map((pos) => (\n              <Option value={pos} key={pos}>\n                {pos}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          name='radioHaveCategory'\n          label='Квалификационную категорию'\n          rules={[{ required: true }]}\n        >\n          <Radio.Group onChange={onChangeRadio}>\n            <Radio value='не имею'>не имею</Radio>\n            <Radio value='имел(а)'>имел(а)</Radio>\n            <Radio value='имею'>имею</Radio>\n          </Radio.Group>\n        </Form.Item>\n        {isCategory && (\n          <>\n            <Form.Item\n              name='radioIsCategory'\n              label={radioValue.charAt(0).toUpperCase() + radioValue.slice(1)}\n              rules={[{ required: true, message: 'Выберите категорию!' }]}\n            >\n              <Radio.Group>\n                <Radio value='первую'>1 категорию</Radio>\n                <Radio value='высшую'>высшую</Radio>\n              </Radio.Group>\n            </Form.Item>\n            <Form.Item\n              name='datePicker'\n              label='Дата оканчания аттестации'\n              rules={[{ required: true, message: 'Выберите дату!' }]}\n            >\n              <DatePicker\n                locale={locale}\n                format={dateFormat}\n                // dateRender={(current) => {\n                //   const style = {};\n                //   if (current.date() === moment().weekday(-5).date()) {\n                //     style.border = '1px solid #1890ff';\n                //     style.borderRadius = '50%';\n                //   }\n                //   return (\n                //     <div className='ant-picker-cell-inner' style={style}>\n                //       {current.date()}\n                //     </div>\n                //   );\n                // }}\n              />\n            </Form.Item>\n          </>\n        )}\n        <Form.Item\n          name='radioPresence'\n          label='Прошу провести аттестацию'\n          rules={[{ required: true, message: 'Необходимо выбрать!' }]}\n        >\n          <Radio.Group>\n            <Radio.Button value='без моего присутствия'>\n              без моего присутствия\n            </Radio.Button>\n            <Radio.Button value='в моём присутствии'>\n              в моём присутствии\n            </Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item\n          name='dateYear'\n          label='Прошу аттестовать в'\n          rules={[{ required: true, message: 'Выберите год аттестации!' }]}\n        >\n          <DatePicker\n            locale={locale}\n            picker='year'\n            disabledDate={disabledDate}\n          />\n        </Form.Item>\n        <Form.Item\n          name='radioWantCategory'\n          label='На'\n          rules={[{ required: true, message: 'Выберите категорию!' }]}\n        >\n          <Radio.Group>\n            <Radio value='первую'>1 категорию</Radio>\n            {isCategory && <Radio value='высшую'>высшую категорию</Radio>}\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item {...tailLayout} name='agreement' valuePropName='checked'>\n          <Checkbox>Согласие на обработку прерсональных данных</Checkbox>\n        </Form.Item>\n        <Form.Item name='dateToday' label='Дата подачи заявления'>\n          <DatePicker format={dateFormat} disabled />\n        </Form.Item>\n        <Form.Item\n          {...tailLayout}\n          name='reCaptcha'\n          rules={[\n            {\n              required: true,\n              message: 'Подтвердите, что Вы не робот!',\n            },\n          ]}\n        >\n          <ReCAPTCHA\n            sitekey={keyReCaptcha}\n            // onChange={onChangeCAPTCHA}\n            hl='ru'\n          />\n        </Form.Item>\n        <Form.Item {...tailLayout}>\n          <Button type='primary' htmlType='submit'>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n      {pdf && (\n        <Button\n          type='primary'\n          shape='round'\n          icon={<DownloadOutlined />}\n          href={'http://localhost:5000' + pdf}\n        >\n          Скачать\n        </Button>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","/home/alexander/project/umc/front/src/reportWebVitals.js",[],"/home/alexander/pizzaSoft/umc/front/src/index.js",[],["38","39"],"/home/alexander/pizzaSoft/umc/front/src/reportWebVitals.js",[],"/home/alexander/pizzaSoft/umc/front/src/App.js",["40","41","42","43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":43,"column":13,"nodeType":"51","messageId":"52","endLine":43,"endColumn":57},{"ruleId":"49","severity":1,"message":"50","line":45,"column":12,"nodeType":"51","messageId":"52","endLine":45,"endColumn":41},{"ruleId":"49","severity":1,"message":"50","line":48,"column":13,"nodeType":"51","messageId":"52","endLine":48,"endColumn":66},{"ruleId":"49","severity":1,"message":"50","line":49,"column":13,"nodeType":"51","messageId":"52","endLine":49,"endColumn":43},{"ruleId":"49","severity":1,"message":"50","line":52,"column":12,"nodeType":"51","messageId":"52","endLine":52,"endColumn":64},{"ruleId":"53","severity":1,"message":"54","line":92,"column":9,"nodeType":"55","messageId":"56","endLine":92,"endColumn":16},{"ruleId":"45","replacedBy":"57"},{"ruleId":"47","replacedBy":"58"},{"ruleId":"49","severity":1,"message":"50","line":42,"column":13,"nodeType":"51","messageId":"52","endLine":42,"endColumn":57},{"ruleId":"49","severity":1,"message":"50","line":44,"column":12,"nodeType":"51","messageId":"52","endLine":44,"endColumn":41},{"ruleId":"49","severity":1,"message":"50","line":45,"column":13,"nodeType":"51","messageId":"52","endLine":45,"endColumn":66},{"ruleId":"49","severity":1,"message":"50","line":46,"column":13,"nodeType":"51","messageId":"52","endLine":46,"endColumn":43},{"ruleId":"49","severity":1,"message":"50","line":49,"column":12,"nodeType":"51","messageId":"52","endLine":49,"endColumn":64},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-unused-vars","'onReset' is assigned a value but never used.","Identifier","unusedVar",["59"],["60"],"no-global-assign","no-unsafe-negation"]